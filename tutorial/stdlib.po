# Python Documentation Turkish Translation
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-01 00:21+0000\n"
"PO-Revision-Date: 2022-12-28 22:49+0300\n"
"Last-Translator: \n"
"Language-Team: TURKISH <python.docs.tr@gmail.com>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.0.1\n"

#: tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr "Standart Kütüphanenin Özeti"

#: tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr "İşletim Sistemi Arayüzü"

#: tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with the "
"operating system::"
msgstr ""
":mod:`os` modülü, işletim sistemiyle etkileşim kurmak için düzinelerce "
"fonksiyon sağlar::"

#: tutorial/stdlib.rst:16
msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python312'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system shell\n"
"0"
msgstr ""

#: tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""
"``from os import *`` yerine ``import os`` stilini kullandığınızdan emin "
"olun.  Yanlış kullanım olan ilk stili tercih etmek, :func:`os.open` 'ın çok "
"daha farklı çalışan gömülü :func:`open` fonksiyonunu gölgelemesine neden "
"olur."

#: tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""
"Gömülü :func:`dir` ve :func:`help` fonksiyonları :mod:`os` gibi büyük "
"modüllerle çalışma konusunda interaktif yardımcılar olarak kullanışlıdır::"

#: tutorial/stdlib.rst:32
msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""

#: tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr ""
"Günlük dosya ve dizin yönetimi görevleri için :mod:`shutil` modülü kullanımı "
"daha kolay olan daha yüksek düzeyli (higher level) bir arayüz sağlar::"

#: tutorial/stdlib.rst:41
msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""

#: tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr "Dosya Joker Karakterleri"

#: tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ""
":mod:`glob` modülü , klasör joker karakter aramalarından dosya listeleri "
"oluşturabilmek için bir fonsiyon sağlar::"

#: tutorial/stdlib.rst:56
msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""

#: tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr "Komut Satırı Argümanları"

#: tutorial/stdlib.rst:66
#, fuzzy
msgid ""
"Common utility scripts often need to process command line arguments. These "
"arguments are stored in the :mod:`sys` module's *argv* attribute as a list.  "
"For instance, let's take the following :file:`demo.py` file::"
msgstr ""
"Ortak yardımcı programların, çoğunlukla komut satırı argümanlarını "
"işlemeleri gerekir. Bu argümanlar :mod:`sys` modülünün *argv* özelliğinin "
"içinde liste olarak saklanır. Örneğin ``python demo.py one two three`` "
"dosyasını çalıştırdığınız zaman vereceği çıktı::"

#: tutorial/stdlib.rst:70
msgid ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"
msgstr ""

#: tutorial/stdlib.rst:74
msgid ""
"Here is the output from running ``python demo.py one two three`` at the "
"command line::"
msgstr ""

#: tutorial/stdlib.rst:77
msgid "['demo.py', 'one', 'two', 'three']"
msgstr ""

#: tutorial/stdlib.rst:79
msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or more "
"filenames and an optional number of lines to be displayed::"
msgstr ""
":mod:`argparse` modülü, komut satırı argümanlarını işlemek için daha "
"sofistike bir yöntem sağlar.  Aşağıdaki program, bir veya birden fazla dosya "
"adını ve isteğe bağlı görüntülenecek satır sayısını ayıklar::"

#: tutorial/stdlib.rst:83
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""

#: tutorial/stdlib.rst:93
msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt beta."
"txt``, the script sets ``args.lines`` to ``5`` and ``args.filenames`` to "
"``['alpha.txt', 'beta.txt']``."
msgstr ""
"Komut satırında ``python top.py --lines=5 alpha.txt beta.txt`` "
"çalıştırıldığı zaman program, ``args.lines`` ögesini ``5`` ve ``args."
"filenames`` ögesini ``['alpha.txt', 'beta.txt']`` olarak ayarlar."

#: tutorial/stdlib.rst:101
msgid "Error Output Redirection and Program Termination"
msgstr "Hata Çıktısının Yeniden Yönlendirilmesi ve Programın Sonlandırılması"

#: tutorial/stdlib.rst:103
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages to "
"make them visible even when *stdout* has been redirected::"
msgstr ""
":mod:`sys` modülü ayrıca *stdin*, *stdout* ve *stderr* özelliklerine "
"sahiptir. İkincisi, *stdout* yeniden yönlendirilmiş olsa bile bunları "
"görünür hale getirmek için uyarılar ve hata iletileri yayımlamak için "
"yararlıdır::"

#: tutorial/stdlib.rst:107
msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')\n"
"Warning, log file not found starting a new one"
msgstr ""

#: tutorial/stdlib.rst:110
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr ""
"Bir programı sonlandırmak için, en kısa yol olan ``sys.exit()`` komutunu "
"kullanın."

#: tutorial/stdlib.rst:116
msgid "String Pattern Matching"
msgstr "String Örüntü Eşlemesi"

#: tutorial/stdlib.rst:118
msgid ""
"The :mod:`re` module provides regular expression tools for advanced string "
"processing. For complex matching and manipulation, regular expressions offer "
"succinct, optimized solutions::"
msgstr ""
":mod:`re` modülü, gelişmiş string işleme için kurallı ifade araçları sağlar. "
"Karmaşık eşleme ve manipülasyon için, kurallı ifadeler kısa ve optimize "
"edilmiş çözümler sunar::"

#: tutorial/stdlib.rst:122
msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""

#: tutorial/stdlib.rst:128
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr ""
"Basit işlemlerde \"string\" metodu önerilir çünkü okuması ve hata ayıklaması "
"daha kolaydır::"

#: tutorial/stdlib.rst:131
msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""

#: tutorial/stdlib.rst:138
msgid "Mathematics"
msgstr "Matematik"

#: tutorial/stdlib.rst:140
#, fuzzy
msgid ""
"The :mod:`math` module gives access to the underlying C library functions "
"for floating-point math::"
msgstr ""
":mod:`math` modülünün içindeki C kütüphanesi ondalıklı matematik "
"fonksiyonlarına erişim sağlar::"

#: tutorial/stdlib.rst:143
msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""

#: tutorial/stdlib.rst:149
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ":mod:`random` modülü rastgele seçimler yapmak için araçlar sağlar::"

#: tutorial/stdlib.rst:151
msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""

#: tutorial/stdlib.rst:161
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the "
"mean, median, variance, etc.) of numeric data::"
msgstr ""
":mod:`statistics` modülü sayı içeren veriler için temel istatistiksel "
"özellikleri hesaplar (ortalama, ortanca, fark, vb.)::"

#: tutorial/stdlib.rst:164
msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""

#: tutorial/stdlib.rst:173
msgid ""
"The SciPy project <https://scipy.org> has many other modules for numerical "
"computations."
msgstr ""
"SciPy projesi <https://scipy.org> sayısal hesaplamalar için daha fazla modül "
"içerir."

#: tutorial/stdlib.rst:179
msgid "Internet Access"
msgstr "İnternet Erişimi"

#: tutorial/stdlib.rst:181
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""
"İnternete bağlanmak ve internet protokollerini işlemek için bazı modüller "
"var. Bunlardan en basit ikisi; :mod:`urllib.request` URL'lerden veri çekmek, "
"ve :mod:`smtplib` ise mail göndermek için::"

#: tutorial/stdlib.rst:185
msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""

#: tutorial/stdlib.rst:204
msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr ""
"(İkinci örnek için bir mail sunucusunun localhost'ta çalışması gerektiğini "
"unutmayın.)"

#: tutorial/stdlib.rst:210
msgid "Dates and Times"
msgstr "Tarihler ve Saatler"

#: tutorial/stdlib.rst:212
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction "
"for output formatting and manipulation.  The module also supports objects "
"that are timezone aware. ::"
msgstr ""
":mod:`datetime` modülü, tarihleri ve saatleri hem basit hem de karmaşık "
"şekillerde işlemek için sınıflar sağlar. Tarih ve saat aritmetiği "
"desteklenirken, uygulamanın odak noktası çıktı biçimlendirmesi ve "
"düzenlemesi için verimli üye ayıklamadır.  Modül ayrıca saat dilimi farkında "
"olan nesneleri de destekler. ::"

#: tutorial/stdlib.rst:218
msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""

#: tutorial/stdlib.rst:236
msgid "Data Compression"
msgstr "Veri Sıkıştırma"

#: tutorial/stdlib.rst:238
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:"
"`zipfile` and :mod:`tarfile`. ::"
msgstr ""
"Genel veri arşivleme ve sıkıştırma formatları şu modüller tarafından "
"desteklenir: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:"
"`zipfile` ve :mod:`tarfile`. ::"

#: tutorial/stdlib.rst:242
msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""

#: tutorial/stdlib.rst:258
msgid "Performance Measurement"
msgstr "Performans Ölçümü"

#: tutorial/stdlib.rst:260
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides a "
"measurement tool that answers those questions immediately."
msgstr ""
"Bazı Python kullanıcıları, aynı soruna farklı yaklaşımların göreli "
"performansını bilmek konusunda derin bir ilgi geliştirir. Python, bu "
"soruları hemen yanıtlayan bir ölçüm aracı sağlar."

#: tutorial/stdlib.rst:264
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The :mod:"
"`timeit` module quickly demonstrates a modest performance advantage::"
msgstr ""
"Örneğin, argümanları değiştirmek için geleneksel yaklaşım yerine dizi "
"paketleme ve açma özelliğini kullanmak cazip olabilir. :mod:`timeit` modülü "
"hızla sade bir performans avantajı gösterir::"

#: tutorial/stdlib.rst:268
msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""

#: tutorial/stdlib.rst:274
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile` "
"and :mod:`pstats` modules provide tools for identifying time critical "
"sections in larger blocks of code."
msgstr ""
":mod:`timeit` 'in ince ayrıntı düzeyinin aksine, :mod:`profile` ve :mod:"
"`pstats` modülleri, daha büyük kod bloklarında zaman açısından kritik "
"bölümleri tanımlamak için araçlar sağlar."

#: tutorial/stdlib.rst:282
msgid "Quality Control"
msgstr "Kalite Kontrolü"

#: tutorial/stdlib.rst:284
msgid ""
"One approach for developing high quality software is to write tests for each "
"function as it is developed and to run those tests frequently during the "
"development process."
msgstr ""
"Yüksek kalitede yazılımlar geliştirmek için her fonksiyon için testler "
"yazılmalıdır ve bu testler geliştirirken sık sık çalıştırmalıdır."

#: tutorial/stdlib.rst:288
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction is "
"as simple as cutting-and-pasting a typical call along with its results into "
"the docstring. This improves the documentation by providing the user with an "
"example and it allows the doctest module to make sure the code remains true "
"to the documentation::"
msgstr ""
":mod:`doctest` modülü, bir modülü taramak ve bir programın docstrings'ine "
"gömülü testleri doğrulamak için bir araç sağlar.  Test yapısı, sonuçlarıyla "
"birlikte tipik bir çağrıyı docstring'e kesip yapıştırma kadar basittir. Bu, "
"kullanıcıya bir örnek sunarak dokümantasyonu geliştirir ve doctest modülünün "
"kodun dokümantasyona göre doğru olduğundan emin olmasını sağlar::"

#: tutorial/stdlib.rst:295
msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""

#: tutorial/stdlib.rst:306
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained in "
"a separate file::"
msgstr ""
":mod:`unittest` modülü, :mod:`doctest` modülü gibi çaba istemeyen bir modül "
"değildir ama daha geniş kapsamlı test setlerinin ayrı dosyalarda "
"sağlanmasına imkân verir::"

#: tutorial/stdlib.rst:310
msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""

#: tutorial/stdlib.rst:328
msgid "Batteries Included"
msgstr "Bataryalar Dahildir"

#: tutorial/stdlib.rst:330
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen through "
"the sophisticated and robust capabilities of its larger packages. For "
"example:"
msgstr ""
"Python'un \"bataryalar dahil\" felsefesi vardır. Bu , büyük paketlerin en "
"iyi şekilde sofistike ve sağlam kapabiliteleriyle görülür. Mesela:"

#: tutorial/stdlib.rst:333
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing "
"remote procedure calls into an almost trivial task.  Despite the modules' "
"names, no direct knowledge or handling of XML is needed."
msgstr ""
":mod:`xmlrpc.client` ve :mod:`xmlrpc.server` modülleri, uzak işlem grubu "
"çağrılarını uygulamayı neredeyse önemsiz bir görev haline getirir.  Modül "
"adlarına rağmen, XML'nin doğrudan bilgisine veya işlenmesine gerek yoktur."

#: tutorial/stdlib.rst:337
msgid ""
"The :mod:`email` package is a library for managing email messages, including "
"MIME and other :rfc:`2822`-based message documents. Unlike :mod:`smtplib` "
"and :mod:`poplib` which actually send and receive messages, the email "
"package has a complete toolset for building or decoding complex message "
"structures (including attachments) and for implementing internet encoding "
"and header protocols."
msgstr ""
":mod:`email` paketi e-mail mesajlarını işlemek için bir kütüphanedir.MIME ve "
"diğer :rfc:`2822`-tabanlı mesajların dokümanlarını içerir. Mesaj gönderip "
"alan :mod:`smtplib` ve :mod:`poplib` 'in aksine, e-mail paketinin derleme "
"işlemini, kompleks mesaj yapılarının (ekler dahil) decode edilebilmesini "
"sağlayan, internet encode işlemini ve header protokollerini uygulamak için "
"geniş kapsamlı bir toolkit'e sahiptir."

#: tutorial/stdlib.rst:344
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading and "
"writing of files in Comma-Separated Value format, commonly supported by "
"databases and spreadsheets.  XML processing is supported by the :mod:`xml."
"etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages. Together, "
"these modules and packages greatly simplify data interchange between Python "
"applications and other tools."
msgstr ""
":mod:`json` paketi, bu popüler veri değişim biçimini ayrıştırmak için sağlam "
"destek sağlar.  :mod:`csv` modülü, genellikle veritabanları ve elektronik "
"tablolar tarafından desteklenen Virgülle-Ayrılmış Değer biçimindeki "
"dosyaların doğrudan okunmasını ve yazılmasını destekler.  XML işleme :mod:"
"`xml.etree.ElementTree`, :mod:`xml.dom` ve :mod:`xml.sax` paketleri "
"tarafından desteklenir. Birlikte, bu modüller ve paketler Python "
"uygulamaları ve diğer araçlar arasındaki veri değişimini büyük ölçüde "
"basitleştirir."

#: tutorial/stdlib.rst:353
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""
":mod:`sqlite3` modülü , SQLite veritabanı kütüphanesi için bir wrapper'dır. "
"Biraz standart dışı SQL syntax'ları kullanılarak güncellenebilen ve "
"erişilebilen kalıcı bir veritabanı sağlanabilir."

#: tutorial/stdlib.rst:357
msgid ""
"Internationalization is supported by a number of modules including :mod:"
"`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""
"Uluslararasılaştırma :mod:`gettext`, :mod:`locale` ve :mod:`codecs` paketi "
"dahil olmak üzere bir dizi modül tarafından desteklenir."

#: tutorial/stdlib.rst:27
msgid "built-in function"
msgstr ""

#: tutorial/stdlib.rst:27
msgid "help"
msgstr ""
